<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mail.mailViolation.mapper.MailMapper">

    <select id="findEmployeeByDraftsmanAndApprReferYn" parameterType="string" resultType="com.mail.mailViolation.dto.dao.EmployeeDao">
        SELECT EMP_ID, EMP_NAME, DEPT_ID, EMP_EMAIL, USE_YN, RGT_DTTM, APPR_REFER_YN
          FROM TB_AS_SCRT_EMP
         WHERE EMP_NAME = #{draftsman}
--            AND APPR_REFER_YN = 'N'
    </select>

    <!-- MyBatis Mapper XML -->
    <select id="findBossByDeptId" resultType="com.mail.mailViolation.dto.dao.EmployeeDao">

        -- 현재 부서의 보직좌 조회

        SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_ID, E.EMP_EMAIL, E.USE_YN, E.RGT_DTTM, E.APPR_REFER_YN
        FROM TB_AS_SCRT_EMP E
        WHERE E.DEPT_ID = #{deptId}
          AND E.APPR_REFER_YN = 'Y'
        UNION
        -- 상위 부서의 보직좌 조회
        SELECT E.EMP_ID, E.EMP_NAME, E.DEPT_ID, E.EMP_EMAIL, E.USE_YN, E.RGT_DTTM, E.APPR_REFER_YN
        FROM TB_AS_SCRT_EMP E
                 INNER JOIN TB_AS_SCRT_DEPT D ON E.DEPT_ID = D.DEPT_ID
        WHERE D.DEPT_CODE = (SELECT UPPER_DEPT FROM TB_AS_SCRT_DEPT WHERE DEPT_ID = #{deptId})
          AND E.APPR_REFER_YN = 'Y'
          AND E.use_yn = 'Y'

    </select>

    <insert id="insertValidResult" parameterType="com.mail.mailViolation.dto.dao.MailResultDao">
        MERGE INTO TEST_EMAIL_VALID T
            USING (SELECT #{docNumber} AS temp FROM dual) S
            ON (T.DOC_NUMBER = S.temp)
            WHEN MATCHED THEN
                UPDATE SET
                    T.DRAFTSMAN = #{draftsman},
                    T.DEPT = #{dept},
                    T.DEPT_ID = #{deptId},
                    T.TITLE = #{title, jdbcType=VARCHAR},
                    T.APPROVAL_DATE = #{approvalDate, jdbcType=TIMESTAMP},
                    T.MAIL_TITLE = #{mailTitle},
                    T.RECIPIENT = #{recipient},
                    T.REFERENCE = #{reference},
                    T.BLOCK_CAUSE = #{blockCause},
                    T.LAST_APPROVER = #{lastApprover},
                    T.RESULT = #{result}
            WHEN NOT MATCHED THEN
                INSERT (
                        NO, DOC_NUMBER, DRAFTSMAN, DEPT, DEPT_ID, TITLE, APPROVAL_DATE,
                        MAIL_TITLE, RECIPIENT, REFERENCE, BLOCK_CAUSE, LAST_APPROVER, RESULT
                    )
                    VALUES (
                               TEST_EMAIL_VALID_seq.NEXTVAL, #{docNumber}, #{draftsman}, #{dept}, #{deptId}, #{title},
                               #{approvalDate, jdbcType=TIMESTAMP}, #{mailTitle}, #{recipient}, #{reference},
                               #{blockCause}, #{lastApprover}, #{result}
                           )
    </insert>


    <resultMap id="mailResultMap" type="com.mail.mailViolation.dto.dao.MailResultDao">
        <result property="docNumber" column="DOC_NUMBER"/>
        <result property="draftsman" column="DRAFTSMAN"/>
        <result property="dept" column="DEPT"/>
        <result property="deptId" column="DEPT_ID"/>
        <result property="title" column="TITLE"/>
        <result property="approvalDate" column="APPROVAL_DATE"/>
        <result property="mailTitle" column="MAIL_TITLE"/>
        <result property="recipient" column="RECIPIENT"/>
        <result property="reference" column="REFERENCE"/>
        <result property="blockCause" column="BLOCK_CAUSE"/>
        <result property="lastApprover" column="LAST_APPROVER"/>
        <result property="result" column="RESULT"/>
    </resultMap>

    <select id="findValidEmail" resultMap="mailResultMap">
        SELECT *
        FROM TEST_EMAIL_VALID
    </select>

</mapper>