<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="nice.mailViolation.mapper.MailMapper">

    <!-- 기안자 이름으로 TB_AS_SCRT_EMP 테이블에서 직원 정보를 조회 -->
    <select id="findByNameAndUseYn" resultType="nice.mailViolation.dto.EmployeeDto">
        SELECT EMP_ID, EMP_NAME, DEPT_ID, EMP_EMAIL, USE_YN, RGT_DTTM, APPR_REFER_YN
        FROM TB_AS_SCRT_EMP
        WHERE EMP_NAME = #{name}
          AND USE_YN = 'Y'
    </select>

    <!-- 모든 팀장 조회 -->
    <select id="findAllTBoss" resultType="map">
        SELECT DEPT_ID, EMP_NAME FROM TB_AS_SCRT_EMP
        WHERE USE_YN = 'Y'
          AND APPR_REFER_YN = 'T'
    </select>

    <!-- 모든 실장 조회 -->
    <select id="findAllSBoss" resultType="nice.mailViolation.dto.BossInfo">
        SELECT DEPT_ID as deptId, EMP_NAME as name, EMP_EMAIL as email FROM TB_AS_SCRT_EMP
        WHERE USE_YN = 'Y'
          AND APPR_REFER_YN = 'S'
    </select>

    <!-- 모든 본부장 조회 -->
    <select id="findAllBBoss" resultType="nice.mailViolation.dto.BossInfo">
        SELECT D1.dept_id as deptId, E.emp_name as name, E.emp_email as email
        FROM tb_as_scrt_emp E
                 JOIN tb_as_scrt_dept D ON E.dept_id = D.dept_id
                 JOIN tb_as_scrt_dept D1 ON D.dept_code = D1.upper_dept
        WHERE E.USE_YN = 'Y'
          AND E.APPR_REFER_YN = 'B'
    </select>



    <!-- TEST_EMAIL_VALID 테이블에 메일 결과를 삽입 또는 업데이트 -->
    <insert id="insertValidResult" parameterType="nice.mailViolation.dto.MailResultDto">
        MERGE INTO TEST_EMAIL_VALID T
            USING (SELECT #{docNumber} AS temp FROM dual) S
            ON (T.DOC_NUMBER = S.temp)
            WHEN MATCHED THEN
                UPDATE SET
                    T.DRAFTSMAN = #{draftsman},
                    T.DEPT = #{dept},
                    T.DEPT_ID = #{deptId},
                    T.TITLE = #{title, jdbcType=VARCHAR},
                    T.APPROVAL_DATE = #{approvalDate, jdbcType=TIMESTAMP},
                    T.MAIL_TITLE = #{mailTitle},
                    T.RECIPIENT = #{recipient},
                    T.REFERENCE = #{reference},
                    T.BLOCK_CAUSE = #{blockCause},
                    T.LAST_APPROVER = #{lastApprover},
                    T.RESULT = #{result},
                    T.REASON_INELIGIBILITY = #{reasonIneligibility}
            WHEN NOT MATCHED THEN
                INSERT (
                        NO, DOC_NUMBER, DRAFTSMAN, DEPT, DEPT_ID, TITLE, APPROVAL_DATE,
                        MAIL_TITLE, RECIPIENT, REFERENCE, BLOCK_CAUSE, LAST_APPROVER, RESULT, REASON_INELIGIBILITY
                    )
                    VALUES (
                               TEST_EMAIL_VALID_seq.NEXTVAL, #{docNumber}, #{draftsman}, #{dept}, #{deptId}, #{title},
                               #{approvalDate, jdbcType=TIMESTAMP}, #{mailTitle}, #{recipient}, #{reference},
                               #{blockCause}, #{lastApprover}, #{result}, #{reasonIneligibility}
                           )
    </insert>

    <!-- 메일 결과 매핑 설정 -->
    <resultMap id="mailResultMap" type="nice.mailViolation.dto.MailResultDto">
        <result property="docNumber" column="DOC_NUMBER"/>
        <result property="draftsman" column="DRAFTSMAN"/>
        <result property="dept" column="DEPT"/>
        <result property="deptId" column="DEPT_ID"/>
        <result property="title" column="TITLE"/>
        <result property="approvalDate" column="APPROVAL_DATE"/>
        <result property="mailTitle" column="MAIL_TITLE"/>
        <result property="recipient" column="RECIPIENT"/>
        <result property="reference" column="REFERENCE"/>
        <result property="blockCause" column="BLOCK_CAUSE"/>
        <result property="lastApprover" column="LAST_APPROVER"/>
        <result property="result" column="RESULT"/>
        <result property="reasonIneligibility" column="REASON_INELIGIBILITY"/>
    </resultMap>

    <!-- TEST_EMAIL_VALID 테이블에서 날짜에 맞게 조회 -->
    <select id="searchDateConditionX" resultMap="mailResultMap">
        SELECT *
        FROM TEST_EMAIL_VALID
        WHERE APPROVAL_DATE BETWEEN TO_DATE(#{fromYear} || LPAD(#{fromMonth}, 2, '0') || '01', 'YYYYMMDD')
            AND LAST_DAY(TO_DATE(#{toYear} || LPAD(#{toMonth}, 2, '0') || '01', 'YYYYMMDD'))
          AND RESULT = 'X'
    </select>

    <!-- 예전에 사용한 쿼리들 -->
    <!--  실장 조회  -->
    <select id="findSBoss" resultType="string">
        SELECT EMP_NAME FROM TB_AS_SCRT_EMP
        WHERE DEPT_ID = #{deptId}
          AND USE_YN = 'Y'
          AND APPR_REFER_YN = 'S'
    </select>

    <!-- 팀장 리스트 조회 -->
    <select id="findTBoss" resultType="string">
        SELECT EMP_NAME FROM TB_AS_SCRT_EMP
        WHERE DEPT_ID = #{deptId}
          AND USE_YN = 'Y'
          AND APPR_REFER_YN = 'T'
    </select>

    <!-- 본부장의 이름을 찾는 쿼리 -->
    <select id="findBBoss" resultType="string">
        SELECT E.emp_name
        FROM tb_as_scrt_emp E
                 JOIN tb_as_scrt_dept D ON E.dept_id = D.dept_id
        WHERE D.dept_code IN (
            SELECT D1.upper_dept
            FROM tb_as_scrt_dept D1
            WHERE D1.dept_id = #{deptId}
        )
          AND E.USE_YN = 'Y'
          AND E.APPR_REFER_YN = 'B'
    </select>

</mapper>